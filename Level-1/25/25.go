//25: Написать свою структуру счетчик, которая будет инкрементировать и выводить значения в конкурентной среде.
package main

import (
	"fmt"
	"sync"
)

type Counter struct {
	mu    sync.RWMutex
	index int
}

func (c *Counter) increment() {
	//Блокировка доступа к общему ресурсу
	c.mu.Lock()
	//Инскрементация значения
	c.index++
	//Разблокировка доступа к общему ресурсу
	c.mu.Unlock()
}

func (c *Counter) print() {
	//Поскольку функция print() гарантирует, что наш объект не изменяется, то мы можем использовать mu.RLock.
	//В некоторых сценариях это может уменьшить количество горутин в состоянии блокировки и потенциально дать прирост производительности в сценарии, где происходит много read-only обращений к данным.
	c.mu.RLock()
	fmt.Println(c.index)
	c.mu.RUnlock()
}

func main() {
	//Инициализация экземпляра структуры (при использовании new() поля объекта принимают дефолтные значения)
	c := new(Counter)
	//
	var wg sync.WaitGroup

	for i := 0; i < 20; i++ {
		//Метод Add определяет значение внутреннего счетчика активных элементов.
		wg.Add(1)
		go func() {
			c.increment()
			c.print()
			//Метод wg.Done() уменьшает внутренний счетчик активных элементов на единицу.
			defer wg.Done()
		}()
	}
	//Метод Wait(), ожидает завершения всех горутин из группы wg.
	wg.Wait()
}
