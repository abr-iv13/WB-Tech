//4: Реализовать набор из N воркеров, которые читают из канала произвольные данные и выводят в stdout.
//Данные в канал пишутся из главного потока.
//Необходима возможность выбора кол-во воркеров при старте, а также способ завершения работы всех воркеров.
package main

import (
	"fmt"
	"sync"
)

const COUNT = 7

func worker(ch chan int, wg *sync.WaitGroup) {
	//Вызов метода wg.Done() уменьшает внутренний счетчик активных элементов на единицу.
	defer wg.Done()
	//Считать данные с канала и вывести в stdout
	for v := range ch {
		fmt.Println(v)
	}
}

func main() {
	//WaitGroup ожидает завершения коллекции goroutine.
	wg := &sync.WaitGroup{}

	arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

	//Создание канала типа инт
	ch := make(chan int)

	//С помощью метода Add определяем, что группа будет состоять из n элементов.
	wg.Add(COUNT)

	for i := 0; i < COUNT; i++ {
		go worker(ch, wg)
	}

	//Положить данные из массива в канал!
	for _, v := range arr {
		ch <- v
	}

	//Закрытие канала
	close(ch)
	//Wait блокирует исполнение потока до тех пор пока счетчик WaitGroup не обнулится.
	wg.Wait()
}
